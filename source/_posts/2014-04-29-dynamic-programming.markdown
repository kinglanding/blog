---
layout: post
title: "dynamic programming"
date: 2014-04-29 19:34
comments: true
categories: 动态规划
---
好几年了，没有特意去做与ACM相关的算法题了，时至今日，也确实忘得差不多了，不过，现在也到了该拾起来的时候了。

##### 动态规划
<!--more -->

动态规划（Dynamic Programming）是用来解决最优化问题的最常用手段,说起定义，网上浩瀚如烟，有很多类型，比如：

* 背包问题：0-1背包，完全背包，硬币问题，装箱子问题等。

* 最短路径问题：网络流等。

* 树形动规：最优查找树。

等等等等，严格的划分问题类型没有意义，关键是分析问题的本质：阶段，状态，状态转移，全局最优。

##### 一些术语

首先，先介绍下相关的概念，在结合具体的，例子加深感性和理性上的认识。

动态规划问题的一个通用特点是具备`最优子结构`和`重叠子问题`。当前子问题的解将由上一次子问题的解推出。每一个问题对应一个它的**状态**。`重叠子问题`的意思，某些问题的计算是有重叠的，若该计算结果记录下来，之后其他子问题遇到重叠的直接查表就可以了，避免重复计算。最优子结构则是我们的全局问题可以分解，按照**阶段**来分解。从而规约到最简的问题。说到这，是不是想到了分治法？，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次（把它们记录下来嘛！）。而且另外一个思想是，动规有明显的阶段的概念，而分治只是把问题分成不重复的规模较小的没有阶段概念的小问题。

**基本结构**

多阶段决策问题中，各个阶段采取的决策，一般来说是与时间有关的，决策依赖于当前状态，又随即引起状态的转移，一个决策序列就是在变化的状态中产生出来的，故有“动态”的含义，称这种解决多阶段决策最优化问题的方法为动态规划方法。

**什么是动态规划，我们要如何描述它?**

先来看下形式化的描述的吧，在结合例子描述它。

$$
f\left( S \right) =\underset { d\in D\left( S \right)  }{ opt } \left\{ cos\left( d\vert S \right) \quad \circ \quad f\left( T\left( d|S \right)  \right)  \right\} 
$$

其中，`S`是代指`state`，就是状态空间的一个state，动态规划解决的问题是按照状态和该状态可以选择的决策来解决问题的。确切的来说，`S`代表的就是从开始到当前决策的问题状态；

`d`代指`decision`，是一个从`S`状态所决定的决策空间中$$D\left( S \right) $$做出的决策，不同状态决定的决策空间有可能不同。举例说明，对于硬币问题来讲，假设每个硬币的个数都是无限的，那么对于任何一个状态（目前手里有多少钱），接下来做的决策个数都是一样的，都是从固定的那几枚硬币中挑选；对于不可重复选择的问题，比如拿球，有红黑黄3个球，每个球的权值不同，求一个选球次序使之最优，这下好了，每个阶段的决策空间都是不同的，对于状态1，有红，黑，黄三种状态，接下来，就只能选剩下的球里面的了。所以决策空间会因问题而变化的。还有TSP旅行者问题，在每个节点所对应的状态时从起点到当前状态的最短距离，接下来的选择，得看该节点（状态）的出度是谁了。**所以说，决策依赖当前的状态**。

$$D\left( S \right) $$是决策空间(decision space)，代表从当前状态转到另一个状态时，或者从另一个状态转到当前状态可以选择的决策`d`的结合。（之所以使用或者是说了两种考虑的方式）

`f`是指目标函数(target function)，一个关于状态的函数，往往代表从初始状态到达状态`S`所做的所有决策中的最优利益（不是最大就是最小）。

$$cos\left( d\vert S \right) $$可以叫做成本函数(cost function)，很好理解，就是在状态`S`下，做出选择`d`的成本，成本函数和目标函数不同，因为它不需要依赖上下文条件，只需一步计算就可以搞定。

$$cos\left( d\vert S \right) $$代表的是转移函数(transfer function)，就是指从S做一个决策到达另外一个状态$$S'$$.

$$\circ$$是一个二元操作符，多数是加法或者乘法或者是最大值要不就是最小值。

除此之外，还需要边界条件。

最后来看个最简单的例子。

##### 例子

如果我们有面值为1元、3元和5元的硬币若干枚，如何用最少的硬币凑够11元？有多少种兑换方法？

思路：这个比较简单，状态就是硬币的价值，有多少钱，决策空间是固定的$$D(S)={1,3,5}$$

用$$f(i)$$代表凑够i元，得用最少多少硬币。成本函数也是固定的，为1。

$$
f(i)=\underset { d\in D\left( {1,3,5} \right)  }{min}{1+f(i-d)},i!=0
$$

当然了$$i==0$$时，f(0)=0.

```text
f(11)=min{1+f(11-1),1+f(11-3),1+f(11-5)};
f(10)=min{1+f(10-1),1+f(10-3),1+f(10-5)};
f(9)=min{1+f(9-1),1+f(9-3),1+f(9-5)};
f(8)=min{1+f(8-1),1+f(8-3),1+f(8-5)};
f(7)=min{1+f(7-1),1+f(7-3),1+f(7-5)};
f(6)=min{1+f(6-1),1+f(6-3),1+f(6-5)};
f(5)=min{1+f(5-1),1+f(5-3),1+f(5-5)};
f(4)=min{1+f(4-1),1+f(4-3) )};
f(3)=min{1+f(3-1),1+f(3-3) )};
f(2)=min{1+f(2-1)};
f(1)=min{1+f(1-1)};
f(0)已知=0；
```

所以：

```text
f(1)=min{1+f(1-1)}=1；
f(2)=min{1+f(2-1)}=2；
f(3)=min{1+f(3-1),1+f(3-3) )}=min{3,1}=1;
f(4)=min{1+f(4-1),1+f(4-3) )}=min{2,2}=2;
f(5)=min{1+f(5-1),1+f(5-3),1+f(5-5)}=min{3,3,1}=1;
f(6)=min{1+f(6-1),1+f(6-3),1+f(6-5)}=min{2,2,2}=2;
f(7)=min{1+f(7-1),1+f(7-3),1+f(7-5)}=min{3,3,3}=3;
f(8)=min{1+f(8-1),1+f(8-3),1+f(8-5)}=min{4,2,2}=2;
f(9)=min{1+f(9-1),1+f(9-3),1+f(9-5)}=min{3,3,3}=3;
f(10)=min{1+f(10-1),1+f(10-3),1+f(10-5)}=min{4,4,2}=2;
f(11)=min{1+f(11-1),1+f(11-3),1+f(11-5)}=min{3,3,3}=3;
```

从我们的计算过程来看，求解既可以从前往后也可以从后往前。


